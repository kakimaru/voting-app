<div class="addNew">
  <h2 class="title"><span class="icon">+</span> Create new Poll</h2>
  <form
    id="create-poll-form"
    action="http://localhost:3000/api/surveys/create"
    method="post"
  >
    <div class="form-wrap">
      <label for="question">Question</label>
      <input type="text" id="question" name="question" required />
    </div>
    <div class="form-wrap" id="options-wrap">
      <label for="option1">Option 1</label>
      <input type="text" id="option1" name="option1" required />
      <input type="color" id="color1" name="color1" required />
      <label for="option2">Option 2</label>
      <input type="text" id="option2" name="option2" required />
      <input type="color" id="color2" name="color2" required />
    </div>
    <button type="button" id="add-option-btn" class="add-btn">Add Option</button>
    <button type="submit">Create Poll</button>
  </form>

</div>

<div id="poll-results-container" style="display:none;">
  <h3 id="poll-question"></h3>
  <canvas id="poll-chart"></canvas>
  <div id="vote-buttons"></div>
</div>

<script is:inline type="module">
  document.querySelector(".title").addEventListener("click", function() {
    const form = document.getElementById("create-poll-form");
    const icon = document.querySelector(".icon");
    
    if (form.style.maxHeight) {
      form.style.maxHeight = null;
      form.style.marginTop = "0";
      form.style.opacity = "0";
      icon.textContent = "+";
    } else {
      form.style.maxHeight = form.scrollHeight + "px";
      form.style.marginTop = "16px";
      form.style.opacity = "1";
      icon.textContent = "-";
    }
  });
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.socket.io/4.8.1/socket.io.esm.min.js"></script>
<script>
  import { io } from "socket.io-client";
  import Chart from "chart.js/auto";

  interface PollData {
    _id: string;
    question: string;
    options: string[];
    user: { username: string };
    votes: number[];
    colors: string[];
  }

  //Add option button
  const addOptionButton = document.getElementById("add-option-btn") as HTMLButtonElement;
  addOptionButton.addEventListener("click", () => {
    const optionsWrap = document.getElementById("options-wrap") as HTMLDivElement;
    const option1 = (document.getElementById("option1") as HTMLInputElement).value;
    const option2 = (document.getElementById("option2") as HTMLInputElement).value;

    if (option1 && option2) {
      const optionInputs = Array.from(optionsWrap.querySelectorAll('input[type="text"]')).length;
    const mainoption = optionInputs + 1;

    const optionLabel = document.createElement("label");
    optionLabel.textContent = `Option ${mainoption}`;
    optionsWrap.appendChild(optionLabel);

    const optionInput = document.createElement("input");
    optionInput.type = "text";
    optionInput.name = `option${mainoption}`;
    optionInput.required = true;
    optionInput.style.padding = "12px 16px";
    optionInput.style.border = "1px solid var(--color-grey)";
    optionInput.style.backgroundColor = "var(--color-grey)";
    optionInput.style.borderRadius = "4px";
    optionInput.style.marginBottom = "8px";
    optionsWrap.appendChild(optionInput);
  }



      const colorInput = document.createElement("input");
      colorInput.type = "color";
      colorInput.name = `color${optionsWrap.childElementCount + 1}`;
      colorInput.required = true;
      colorInput.style.padding = "0";
colorInput.style.border = "none"; 
colorInput.style.width = "30px";
colorInput.style.height = "30px"; 
colorInput.style.borderRadius = "50%";
colorInput.style.cursor = "pointer"; 
colorInput.style.backgroundColor = "transparent"; 
colorInput.style.webkitAppearance = "none";

      optionsWrap.appendChild(colorInput);
    }
  );

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("create-poll-form") as HTMLFormElement;
    const pollResultsContainer = document.getElementById(
      "poll-results-container",
    ) as HTMLDivElement;
    const pollQuestion = document.getElementById(
      "poll-question",
    ) as HTMLHeadingElement;
    const voteButtonsContainer = document.getElementById(
      "vote-buttons",
    ) as HTMLDivElement;
    const ctx = (
      document.getElementById("poll-chart") as HTMLCanvasElement
    ).getContext("2d");

    let options: string[] = [];
    let colors: string[] = [];
    let votes: number[] = [];
    let chart: Chart;

    const socket = io("http://localhost:3000");

    socket.on("newPoll", (data) => {
      showPollResults(data);
      window.location.reload();
    });

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      const optionsinput = document.getElementById("options-wrap");
if (optionsinput) {
  optionsinput.querySelectorAll("input[type='text']").forEach((input:any) => {
    if (input.value) {
      options.push(input.value); 
    }
  });
  const colorsinput = document.getElementById("options-wrap");
  if (colorsinput) {
    colorsinput.querySelectorAll("input[type='color']").forEach((input:any) => {
      if (input.value) {
        colors.push(input.value); 
      }
    });
  }
}


      const data = {
        question: form.question.value,
        options: options,
        colors: colors,
        votes: votes
      };

      try {
        const response = await fetch(form.action, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
          credentials: "include",
        });

        const result = await response.json();

        if (response.ok) {
          alert("Poll created successfully!");
          socket.emit("newPoll", result);
          showPollResults(result);
        } else {
          alert(`Error: ${result.message}`);
        }

        options = [];
        colors = [];
      } catch (error) {
        console.error("Error:", error);
      }
    });

    function showPollResults(data: PollData) {
      pollResultsContainer.style.display = "block";
      pollQuestion.textContent = data.question;

      const createdByContainer = document.createElement("div");
      createdByContainer.textContent = `Created by: ${data.user.username}`;
      pollResultsContainer.appendChild(createdByContainer);

      voteButtonsContainer.innerHTML = "";
      data.options.forEach((option: string, index: number) => {
        const button = document.createElement("button");
        button.textContent = option;
        button.onclick = () => vote(data, index);
        voteButtonsContainer.appendChild(button);
      });

      if (chart) {
        chart.destroy();
      }

      const ctx = (
        document.getElementById("poll-chart") as HTMLCanvasElement
      ).getContext("2d");
      if (ctx) {
        chart = new Chart(ctx, {
          type: "bar",
          data: {
            labels: data.options,
            datasets: [
              {
                label: "Votes",
                data: data.votes,
                backgroundColor: data.colors,
                borderColor: ["#388e3c", "#f57c00"],
                borderWidth: 1,
              },
            ],
          },
          options: {
            responsive: true,
          },
        });
      } else {
        console.error("Failed to get canvas context");
      }
    }

    async function vote(data: PollData, optionIndex: number) {
      try {
        const response = await fetch("http://localhost:3000/api/surveys/vote", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ surveyId: data._id, optionIndex }),
          credentials: "include",
        });

        if (response.ok) {
          const result = await response.json();
          votes = result.votes;
          updateChart();
        } else {
          const result = await response.json();
          alert(`Error: ${result.message}`);
        }
      } catch (error) {
        console.error("Error:", error);
      }
    }

    function updateChart() {
      if (chart) {
        chart.data.datasets[0].data = votes;
        chart.update();
      }
    }
  });
</script>

<style>
  .addNew {
    padding: 24px;
    border: 1px solid var(--color-grey-line);
    border-radius: 4px;
    max-width: 480px;
    width: 100%;
    margin-top: 24px;
  }

  .title {
    font-size: 20px;
  }

  .title:hover {
    cursor: pointer;
  }

  .icon {
    transition: all 0.3s ease;
  }

  form {
    max-height: 0;
    opacity: 0;
    overflow: hidden;
    transition: all 0.3s ease-out;
    display: flex;
    flex-direction: column;
    gap: 16px;
    height: 300px;
    overflow-y: scroll;
  }

  .form-wrap {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  label {
    font-size: 14px;
    font-weight: bold;
  }

  input {
    padding: 12px 16px;
    border: 1px solid var(--color-grey);
    background-color: var(--color-grey);
    border-radius: 4px;
  }

  button {
    padding: 12px 16px;
    border: none;
    background-color: var(--color-black);
    color: var(--color-white);
    border-radius: 4px;
    transition: all 0.3s ease;
    font-family: inherit;
    font-size: 18px;
  }

  .add-btn {
    border: 1px solid var(--color-black);
    background-color: var(--color-white);
    color: var(--color-black);
  }

  button:hover {
    border-radius: 4px 4px 0 0;
    cursor: pointer;
    opacity: 0.7;
  }

  input[type="color"] {
  padding: 0;
  border: none;
  width: 30px;
  height: 30px; 
  border-radius: 50%; 
  cursor: pointer;
  background-color: transparent;
  -webkit-appearance: none; 
}

</style>