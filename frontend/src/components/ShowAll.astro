---
const apiUrl = import.meta.env.PUBLIC_URL || 'http://localhost:3000';
---
<section data-api-url={apiUrl}>
  <h2>Join a poll</h2>
  <div id="surveys-container" class="pollContainer"></div>
</section>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script is:inline type="module">
  const sectionElement = document.querySelector("section");
  const URL = sectionElement.dataset.apiUrl;

  import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";
  const socket = io(URL);
  let surveys = [];

  socket.on("surveyDeleted", (surveyId) => {
    alert(`The survey with ID ${surveyId} has been deleted`);
    const surveyElement = document.querySelector(
      `[data-survey-id="${surveyId}"]`,
    );
    if (surveyElement) {
      surveyElement.remove();
    }
  });

  socket.on("voteUpdated", (data) => {
    const { surveyId, votes} = data;
    const surveyElement = document.querySelector(
      `[data-survey-id="${surveyId}"]`,
    );

    if (surveyElement) {
      const survey = surveys.find((s) => s._id === surveyId);
      if (survey) {
        survey.votes = votes;
        updateChart(survey, surveyElement.querySelector("canvas"));

        const voteCounts = surveyElement.querySelectorAll("span");
        voteCounts.forEach((voteCount, index) => {
          voteCount.textContent = `Votes: ${survey.votes[index]}`;
        });
      }
    }
  });

  document.addEventListener("DOMContentLoaded", async () => {
    const surveysContainer = document.getElementById("surveys-container");
    const response = await fetch(`${URL}/api/surveys`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
      credentials: "include",
    });

    surveys = await response.json();

    if (surveys.length > 0) {
      surveys.forEach((survey) => {
        // question
        const surveyElement = document.createElement("div");
        surveyElement.classList.add("survey");
        surveyElement.setAttribute("data-survey-id", survey._id);
        const questionElement = document.createElement("h3");
        questionElement.classList.add("surveyTitle")
        questionElement.textContent = survey.question;
        surveyElement.appendChild(questionElement);

        // div
        const infoWrapper = document.createElement("div");
        infoWrapper.classList.add("infoWrapper");

        // created by
        const creatorElement = document.createElement("p");
        creatorElement.classList.add("surveySubInfo")
        creatorElement.textContent = `Created by: ${survey.user.username}`;
        infoWrapper.appendChild(creatorElement);

        //Delete
        const deleteButton = document.createElement("button");
        deleteButton.classList.add("deleteBtn")
        deleteButton.textContent = "Delete";
        deleteButton.onclick = () => deleteSurvey(survey._id);
        infoWrapper.appendChild(deleteButton);

        surveyElement.appendChild(infoWrapper);
        
        //Chart
        const canvas = document.createElement("canvas");
        canvas.classList.add("chart")
        surveyElement.appendChild(canvas);
        createChart(survey, canvas);
        surveysContainer.appendChild(surveyElement);

        // div
        const optionsWrapper = document.createElement("div");
        optionsWrapper.classList.add("optionsWrapper");
        
        // options
        survey.options.forEach((option, index) => {
          const colors = ["#456bff", "#5ec84e"];

          // div
          const optionWrapper = document.createElement("div");
          optionWrapper.classList.add("optionWrapper");

          // button
          const button = document.createElement("button");
          button.classList.add("optionBtn")
          button.textContent = option;

          const color= survey.colors[index]
          button.style.borderColor = color;
          button.style.color = color;
          button.onclick = () => vote(survey._id, index, surveyElement, survey);
          
          // span
          const voteCount = document.createElement("span");
          voteCount.classList.add("voteCount")
          voteCount.textContent = `Votes: ${survey.votes[index]}`;

          optionWrapper.appendChild(button);
          optionWrapper.appendChild(voteCount);

          optionsWrapper.appendChild(optionWrapper)
        });
        
        surveyElement.appendChild(optionsWrapper)

      });
    } else {
      surveysContainer.innerHTML = "<p>No surveys available</p>";
    }
  });

  async function vote(surveyId, optionIndex, surveyElement, survey) {
    try {
      const response = await fetch(`${URL}/api/surveys/vote`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ surveyId, optionIndex }),
        credentials: "include",
      });

      if (response.ok) {
        const result = await response.json();
        survey.votes[optionIndex]++;
        socket.emit("vote", surveyId, optionIndex);

        const voteCounts = surveyElement.querySelectorAll("span");
        voteCounts.forEach((voteCount, index) => {
          voteCount.textContent = `Votes: ${survey.votes[index]}`;
        });

        const canvas = surveyElement.querySelector("canvas");
        updateChart(survey, canvas);
      } else {
        const result = await response.json();
        alert(`Error: ${result.message}`);
      }
    } catch (error) {
      console.error("Error:", error);
    }
  }
  async function deleteSurvey(surveyId) {
    const response = await fetch(
      `${URL}/api/surveys/${surveyId}`,
      {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
      },
    );

    if (response.ok) {
      alert("Survey deleted successfully!");
      socket.emit("deleteSurvey", surveyId);
      const surveyElement = document.querySelector(
        `[data-survey-id="${surveyId}"]`,
      );
      if (surveyElement) {
        surveyElement.remove();
      }
    } else {
      const result = await response.json();
      alert(`Error: ${result.message}`);
    }
  }
  function createChart(survey, canvas) {
    const ctx = canvas.getContext("2d");
    new Chart(ctx, {
      type: "bar",
      data: {
        labels: survey.options,
        datasets: [
          {
            // label: "Votes",
            data: survey.votes,
            backgroundColor:survey.colors,
            borderColor: ["ffffff", "#ffffff"],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false,
          },
        },
      },
    });
  }
  function updateChart(survey, canvas) {
    const ctx = canvas.getContext("2d");
    const chart = Chart.getChart(canvas);
    if (chart) {
      chart.destroy();
    }

    new Chart(ctx, {
      type: "bar",
      data: {
        labels: survey.options,
        datasets: [
          {
            // label: "Votes",
            data: survey.votes,
            backgroundColor: survey.colors,
            borderColor: ["ffffff", "#ffffff"],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        plugins: {
          legend: {
            display: false,
          },
        },
      },
    });
  }
</script>

<style>
  section {
    margin-top: 48px;
  }

  h2 {
    font-size: 20px;
    font-weight: bold;
  }

  .pollContainer {
    display: flex;
    gap: 16px;
    padding: 24px;
    padding-left: 0;
    overflow: scroll;
    flex-wrap: nowrap;
    align-items: flex-start;
    flex-direction: row-reverse;
  }

  @media screen and (min-width: 640px) {
    .pollContainer {
      gap: 32px;
    }
  }
</style>

<style is:global>
  .survey {
    padding: 24px;
    max-width: 480px;
    min-width: 310px;
    width: 100%;
    border: 1px solid var(--color-grey-line);
    border-radius: 4px;
    display: flex;
    flex-direction: column;
    gap: 16px;
    flex:  0 0 310px;
  }

  @media screen and (min-width: 640px) {
    .survey {
      flex:  0 0 640px;
    }
  }
  
  .surveyTitle {
    font-size: 18px;
    width: 100%;
  }

  .infoWrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }

  .surveySubInfo {
    font-size: 12px;
  }

  .deleteBtn {
    padding: 4px 8px;
    font-size: 12px;
    border: 1px solid var(--color-red);
    color: var(--color-red);
    background-color: var(--color-white);
    border-radius: 4px;
    transition: all 0.3s ease;
  }

  .deleteBtn:hover {
    cursor: pointer;
    background-color: var(--color-red);
    color: var(--color-white);
  }

  .optionsWrapper {
    display: flex;
    gap: 16px;
    width: 100%;
    justify-content: center;
  }

  .optionWrapper {
    display: flex;
    flex-direction: column;
    gap: 8px;
    max-width: 40%;
    width: 100%;
    align-items: center;
  }

  .optionBtn {
    padding: 8px 16px;
    border-radius: 4px 4px 0 0;
    width: 100%;
    background-color: var(--color-white);
    outline: none;
    box-shadow: none;
    font-size: 16px;
    transition: all 0.3s ease;
  }

  .optionBtn:hover {
    cursor: pointer;
    transform: translateY(-6px);
  }

  .chart {
    width: 100%;
    height: 100%;
  }

  .voteCount {
    font-size: 12px;
  }
</style>
